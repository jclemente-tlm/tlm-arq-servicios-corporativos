notification = softwareSystem "Notification System" {
    description "Orquesta el envío de notificaciones multicanal para aplicaciones corporativas."
    tags "Notification" "001 - Fase 1"

    db = store "Notification DB" {
        technology "PostgreSQL"
        description "Base de datos central para plantillas, canales, historial de envíos, configuraciones y notificaciones programadas."
        tags "Database" "PostgreSQL" "001 - Fase 1"
    }

    queue = store "Notification Queue" {
        technology "AWS SQS"
        description "Cola para solicitudes de notificación."
        tags "Message Bus" "AWS SQS" "001 - Fase 1"
    }

    dlq = store "Dead Letter Queue" {
        technology "AWS SQS"
        description "Cola para mensajes de notificación fallidos (Dead Letter Queue)."
        tags "Message Bus" "AWS SQS" "DLQ" "001 - Fase 1"
    }

    queueEmail = store "Queue Email" {
        technology "AWS SQS"
        description "Cola para mensajes de notificación por email."
        tags "Message Bus" "AWS SQS" "001 - Fase 1"
    }

    queueSms = store "Queue SMS" {
        technology "AWS SQS"
        description "Cola para mensajes de notificación SMS."
        tags "Message Bus" "AWS SQS" "001 - Fase 1"
    }

    queueWhatsapp = store "Queue WhatsApp" {
        technology "AWS SQS"
        description "Cola para mensajes de notificación WhatsApp."
        tags "Message Bus" "AWS SQS" "001 - Fase 1"
    }

    queuePush = store "Queue Push" {
        technology "AWS SQS"
        description "Cola para mensajes de notificación Push."
        tags "Message Bus" "AWS SQS" "001 - Fase 1"
    }

    storage = store "Attachment Storage" {
        technology "AWS S3"
        description "Almacenamiento para archivos adjuntos de notificaciones."
        tags "File Storage" "AWS S3" "001 - Fase 1"
    }

    api = application "Notification API" {
        technology "ASP.NET Core, C# .NET 8"
        description "API REST para registro de notificaciones y adjuntos."
        tags "CSharp" "001 - Fase 1"

        controller = component "Controller" {
            technology "ASP.NET Core, C# .NET 8"
            description "Expone endpoints REST para registro de solicitudes de notificación."
            tags "001 - Fase 1"
        }

        service = component "Service" {
            technology "C# .NET 8"
            description "Procesa solicitudes de notificación y aplica reglas de negocio."
            tags "001 - Fase 1"
        }

        validator = component "Validator" {
            technology "C# .NET 8, FluentValidation"
            description "Valida datos requeridos en las solicitudes de notificación."
            tags "001 - Fase 1"
        }

        queuePublisher = component "Queue Publisher" {
            technology "C# .NET 8, AWS SDK"
            description "Envía mensajes de notificación a la cola de notificación."
            tags "001 - Fase 1"
        }

        attachmentsController = component "Attachments Controller" {
            technology "ASP.NET Core, C# .NET 8"
            description "Expone endpoints REST para gestión de archivos adjuntos."
            tags "001 - Fase 1"
        }

        attachmentService = component "Attachment Service" {
            technology "C# .NET 8"
            description "Procesa operaciones sobre archivos adjuntos."
            tags "001 - Fase 1"
        }

        attachmentRepository = component "Attachment Repository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Acceso a metadatos de archivos adjuntos en la base de datos."
            tags "001 - Fase 1"
        }

        attachmentManager = component "Attachment Manager" {
            technology "C# .NET 8, AWS SDK"
            description "Gestiona archivos adjuntos."
            tags "001 - Fase 1"
        }

        tenantConfigRepository = component "TenantConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas por tenant."
            tags "001 - Fase 1"
        }

        configManager = component "Configuration Manager" {
            technology "C# .NET 8, AWS SDK"
            description "Lee configuraciones y secretos desde repositorios y plataforma de configuración."
            tags "Configuración" "001 - Fase 1"
        }

        // Componentes de Observabilidad
        healthCheck = component "Health Check" {
            technology "ASP.NET Core Health Checks"
            description "Expone endpoints /health, /health/ready, /health/live para monitoring."
            tags "Observability" "001 - Fase 1"
        }

        metricsCollector = component "Metrics Collector" {
            technology "prometheus-net"
            description "Recolecta métricas de rendimiento: requests/sec, latencia, errores."
            tags "Observability" "001 - Fase 1"
        }

        logger = component "Structured Logger" {
            technology "Serilog"
            description "Logging estructurado con correlationId para trazabilidad."
            tags "Observability" "001 - Fase 1"
        }
    }

    notificationProcessor = application "Notification Processor" {
        technology "Worker Service, C# .NET 8"
        description "Procesa y envía notificaciones multicanal. No gestiona eventos ni realiza consultas."
        tags "CSharp" "001 - Fase 1"

        consumer = component "Consumer" {
            technology "C# .NET 8, AWS SDK"
            description "Consume mensajes desde la cola solicitudes de notificación."
            tags "001 - Fase 1"
        }

        service = component "Service" {
            technology "C# .NET 8"
            description "Valida datos, construye el mensaje y lo distribuye al canal correspondiente."
            tags "001 - Fase 1"
        }

        messageBuilder = component "Message Builder" {
            technology "C# .NET 8"
            description "Genera el mensaje final para cada canal utilizando plantillas y datos de entrada."
            tags "Builder" "001 - Fase 1"
        }

        adapter = component "Adapter" {
            technology "C# .NET 8, AWS SDK"
            description "Envía el mensaje procesado a la cola específica del canal (Email, SMS, WhatsApp, Push)."
            tags "001 - Fase 1"
        }

        repository = component "Repository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Guarda el estado y eventos de las notificaciones procesadas en la base de datos."
            tags "001 - Fase 1"
        }

        configManager = component "Configuration Manager" {
            technology "C# .NET 8, AWS SDK"
            description "Lee configuraciones, plantillas y parámetros de canal desde los repositorios correspondientes."
            tags "Configuración" "001 - Fase 1"
        }

        templateRepository = component "Template Repository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee acceso a las plantillas de notificación y sus versiones."
            tags "Template" "001 - Fase 1"
        }

        tenantConfigRepository = component "TenantConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones y parámetros específicos por tenant."
            tags "001 - Fase 1"
        }

        channelConfigRepository = component "ChannelConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas para cada canal de notificación."
            tags "Configuración" "001 - Fase 1"
        }

        // Componentes de Observabilidad
        metricsCollector = component "Metrics Collector" {
            technology "prometheus-net"
            description "Recolecta métricas: messages processed/sec, processing time, queue depth."
            tags "Observability" "001 - Fase 1"
        }

        logger = component "Structured Logger" {
            technology "Serilog"
            description "Logging estructurado con correlationId para trazabilidad."
            tags "Observability" "001 - Fase 1"
        }
    }

    scheduler = application "Notification Scheduler" {
        technology "Worker Service, C# .NET 8"
        description "Gestiona el envío de notificaciones programadas."
        tags "CSharp" "001 - Fase 1"

        worker = component "Scheduler Worker" {
            technology "Worker Service, C# .NET 8"
            description "Ejecuta tareas programadas para enviar notificaciones pendientes."
            tags "001 - Fase 1"
        }

        service = component "Service" {
            technology "C# .NET 8"
            description "Procesa y programa el envío de notificaciones."
            tags "001 - Fase 1"
        }

        repository = component "Repository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Acceso a notificaciones programadas en la base de datos."
            tags "001 - Fase 1"
        }

        publisher = component "Queue Publisher" {
            technology "C# .NET 8, AWS SDK"
            description "Envía notificaciones programadas a la cola de notificación."
            tags "001 - Fase 1"
        }

        tenantConfigRepository = component "TenantConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas por tenant."
            tags "001 - Fase 1"
        }

        configManager = component "Configuration Manager" {
            technology "C# .NET 8, AWS SDK"
            description "Lee configuraciones y secretos desde repositorios y plataforma de configuración."
            tags "Configuración" "001 - Fase 1"
        }
    }

    // Procesadores de Canal
    emailProcessor = application "Email Processor" {
        technology "Worker Service, C# .NET 8"
        description "Procesa y envía notificaciones por email."
        tags "CSharp" "001 - Fase 1"

        consumer = component "Consumer" {
            technology "C# .NET 8, AWS SDK"
            description "Consume mensajes de la cola de notificación Email."
            tags "001 - Fase 1"
        }

        service = component "Service" {
            technology "C# .NET 8"
            description "Procesa y envía notificaciones por email."
            tags "001 - Fase 1"
        }

        repository = component "Repository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Actualiza el estado de las notificaciones enviadas por email."
            tags "001 - Fase 1"
        }

        adapter = component "Adapter" {
            technology "C# .NET 8, AWS SDK"
            description "Envía notificaciones al proveedor externo de email."
            tags "Integración" "001 - Fase 1"
        }

        attachmentFetcher = component "Attachment Fetcher" {
            technology "C# .NET 8, AWS SDK"
            description "Obtiene archivos adjuntos desde almacenamiento."
            tags "001 - Fase 1"
        }

        tenantConfigRepository = component "TenantConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas por tenant."
            tags "001 - Fase 1"
        }

        configManager = component "Configuration Manager" {
            technology "C# .NET 8, AWS SDK"
            description "Lee configuraciones y secretos desde repositorios y plataforma de configuración."
            tags "Configuración" "001 - Fase 1"
        }

        channelConfigRepository = component "ChannelConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas para el canal de email."
            tags "Configuración" "001 - Fase 1"
        }
    }

    smsProcessor = application "SMS Processor" {
        technology "Worker Service, C# .NET 8"
        description "Procesa y envía notificaciones SMS."
        tags "CSharp" "001 - Fase 1"

        consumer = component "Consumer" {
            technology "C# .NET 8, AWS SDK"
            description "Consume mensajes de la cola notificación SMS."
            tags "001 - Fase 1"
        }

        service = component "Service" {
            technology "C# .NET 8"
            description "Procesa y envía notificaciones SMS."
            tags "001 - Fase 1"
        }

        repository = component "Repository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Actualiza el estado de las notificaciones enviadas por SMS."
            tags "001 - Fase 1"
        }

        adapter = component "Adapter" {
            technology "C# .NET 8, AWS SDK"
            description "Envía notificaciones al proveedor externo de SMS."
            tags "Integración" "001 - Fase 1"
        }

        tenantConfigRepository = component "TenantConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas por tenant."
            tags "001 - Fase 1"
        }

        configManager = component "Configuration Manager" {
            technology "C# .NET 8, AWS SDK"
            description "Lee configuraciones y secretos desde repositorios y plataforma de configuración."
            tags "Configuración" "001 - Fase 1"
        }

        channelConfigRepository = component "ChannelConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas para el canal SMS."
            tags "Configuración" "001 - Fase 1"
        }
    }

    whatsappProcessor = application "WhatsApp Processor" {
        technology "Worker Service, C# .NET 8"
        description "Procesa y envía notificaciones WhatsApp."
        tags "CSharp" "001 - Fase 1"

        consumer = component "Consumer" {
            technology "C# .NET 8, AWS SDK"
            description "Consume mensajes de la cola notificación WhatsApp."
            tags "001 - Fase 1"
        }

        service = component "Service" {
            technology "C# .NET 8"
            description "Procesa y envía notificaciones WhatsApp."
            tags "001 - Fase 1"
        }

        repository = component "Repository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Actualiza el estado de las notificaciones enviadas por WhatsApp."
            tags "001 - Fase 1"
        }

        adapter = component "Adapter" {
            technology "C# .NET 8, AWS SDK"
            description "Envía notificaciones al proveedor externo de WhatsApp."
            tags "Integración" "001 - Fase 1"
        }

        attachmentFetcher = component "Attachment Fetcher" {
            technology "C# .NET 8, AWS SDK"
            description "Obtiene archivos adjuntos desde almacenamiento."
            tags "001 - Fase 1"
        }

        tenantConfigRepository = component "TenantConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas por tenant."
            tags "001 - Fase 1"
        }

        configManager = component "Configuration Manager" {
            technology "C# .NET 8, AWS SDK"
            description "Lee configuraciones y secretos desde repositorios y plataforma de configuración."
            tags "Configuración" "001 - Fase 1"
        }

        channelConfigRepository = component "ChannelConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas para el canal WhatsApp."
            tags "Configuración" "001 - Fase 1"
        }
    }

    pushProcessor = application "Push Processor" {
        technology "Worker Service, C# .NET 8"
        description "Procesa y envía notificaciones Push."
        tags "CSharp" "001 - Fase 1"

        consumer = component "Consumer" {
            technology "C# .NET 8, AWS SDK"
            description "Consume mensajes de la cola notificación Push."
            tags "001 - Fase 1"
        }

        service = component "Service" {
            technology "C# .NET 8"
            description "Procesa y envía notificaciones Push."
            tags "001 - Fase 1"
        }

        repository = component "Repository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Actualiza el estado de las notificaciones enviadas por Push."
            tags "001 - Fase 1"
        }

        adapter = component "Adapter" {
            technology "C# .NET 8, AWS SDK"
            description "Envía notificaciones al proveedor externo de Push."
            tags "Integración" "001 - Fase 1"
        }

        attachmentFetcher = component "Attachment Fetcher" {
            technology "C# .NET 8, AWS SDK"
            description "Obtiene archivos adjuntos desde almacenamiento."
            tags "001 - Fase 1"
        }

        tenantConfigRepository = component "TenantConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas por tenant."
            tags "001 - Fase 1"
        }

        configManager = component "Configuration Manager" {
            technology "C# .NET 8, AWS SDK"
            description "Lee configuraciones y secretos desde repositorios y plataforma de configuración."
            tags "Configuración" "001 - Fase 1"
        }

        channelConfigRepository = component "ChannelConfigRepository" {
            technology "C# .NET 8, Entity Framework Core"
            description "Provee configuraciones específicas para el canal Push."
            tags "Configuración" "001 - Fase 1"
        }
    }

    // Relaciones principales
    api.controller -> api.service "Registra solicitud de notificación" "" "001 - Fase 1"
    api.service -> api.validator "Valida datos de la solicitud" "" "001 - Fase 1"
    api.service -> api.queuePublisher "Encola notificación para procesamiento" "" "001 - Fase 1"
    api.queuePublisher -> queue "Publica mensaje en la cola de notificaciones" "" "001 - Fase 1"
    api.attachmentsController -> api.attachmentService "Registra adjunto" "" "001 - Fase 1"
    api.attachmentRepository -> db "Guarda metadatos de adjuntos" "" "001 - Fase 1"
    api.attachmentService -> api.attachmentRepository "Accede a metadatos de adjuntos" "" "001 - Fase 1"
    api.attachmentService -> api.attachmentManager "Gestiona archivos adjuntos" "" "001 - Fase 1"
    api.attachmentManager -> storage "Almacena archivo adjunto" "" "001 - Fase 1"
    api.configManager -> configPlatform.configService "Obtiene configuraciones y secretos" "" "001 - Fase 1"
    api.configManager -> api.tenantConfigRepository "Obtiene configuraciones por tenant" "" "001 - Fase 1"
    api.tenantConfigRepository -> db "Accede a configuraciones por tenant" "" "001 - Fase 1"

    queue -> notificationProcessor.consumer "Entrega mensaje para procesamiento" "" "001 - Fase 1"
    notificationProcessor.consumer -> notificationProcessor.service "Procesa mensaje de notificación" "" "001 - Fase 1"
    notificationProcessor.service -> notificationProcessor.messageBuilder "Genera mensaje por canal" "" "001 - Fase 1"
    notificationProcessor.service -> notificationProcessor.adapter "Envía mensaje a canal" "" "001 - Fase 1"
    notificationProcessor.service -> notificationProcessor.repository "Registra notificación procesada" "" "001 - Fase 1"
    notificationProcessor.service -> notificationProcessor.configManager "Obtiene configuración y plantillas" "" "001 - Fase 1"
    notificationProcessor.configManager -> notificationProcessor.templateRepository "Obtiene plantillas" "" "001 - Fase 1"
    notificationProcessor.configManager -> notificationProcessor.tenantConfigRepository "Obtiene configuración por tenant" "" "001 - Fase 1"
    notificationProcessor.configManager -> notificationProcessor.channelConfigRepository "Obtiene configuración de canales" "" "001 - Fase 1"
    notificationProcessor.adapter -> queueEmail "Publica mensaje en cola Email" "" "001 - Fase 1"
    notificationProcessor.adapter -> queueSms "Publica mensaje en cola SMS" "" "001 - Fase 1"
    notificationProcessor.adapter -> queueWhatsapp "Publica mensaje en cola WhatsApp" "" "001 - Fase 1"
    notificationProcessor.adapter -> queuePush "Publica mensaje en cola Push" "" "001 - Fase 1"
    notificationProcessor.repository -> db "Guarda notificación procesada" "" "001 - Fase 1"
    notificationProcessor.templateRepository -> db "Accede a plantillas" "" "001 - Fase 1"
    notificationProcessor.tenantConfigRepository -> db "Accede a configuración por tenant" "" "001 - Fase 1"
    notificationProcessor.channelConfigRepository -> db "Accede a configuración de canales" "" "001 - Fase 1"
    emailProcessor.repository -> db "Actualiza estado de notificación email" "Entity Framework Core" "001 - Fase 1"
    smsProcessor.repository -> db "Actualiza estado de notificación SMS" "Entity Framework Core" "001 - Fase 1"
    whatsappProcessor.repository -> db "Actualiza estado de notificación WhatsApp" "Entity Framework Core" "001 - Fase 1"
    pushProcessor.repository -> db "Actualiza estado de notificación Push" "Entity Framework Core" "001 - Fase 1"
    // notificationProcessor.tenantConfigRepository -> db "Lee y actualiza configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    emailProcessor.consumer -> queueEmail "Consume mensaje de Email" "AWS SQS" "001 - Fase 1"
    emailProcessor.consumer -> emailProcessor.service "Procesa mensaje de Email" "" "001 - Fase 1"
    emailProcessor.service -> emailProcessor.repository "Actualiza estado de Email" "" "001 - Fase 1"
    // emailProcessor.repository -> db "Registra estado de notificación" "Entity Framework Core" "001 - Fase 1"
    emailProcessor.service -> emailProcessor.attachmentFetcher "Obtiene adjuntos para envío" "" "001 - Fase 1"
    emailProcessor.attachmentFetcher -> storage "Obtiene archivos adjuntos" "AWS S3" "001 - Fase 1"
    emailProcessor.configManager -> configPlatform.configService "Lee configuraciones y secretos" "" "001 - Fase 1"
    emailProcessor.configManager -> emailProcessor.tenantConfigRepository "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    // emailProcessor.tenantConfigRepository -> db "Lee y actualiza configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    emailProcessor.configManager -> emailProcessor.channelConfigRepository "Lee configuraciones de canal" "Entity Framework Core" "001 - Fase 1"
    emailProcessor.channelConfigRepository -> db "Lee configuraciones de canal" "Entity Framework Core" "001 - Fase 1"
    // emailProcessor.service -> emailProcessor.configManager "Obtiene configuraciones de canal" "" "001 - Fase 1"
    smsProcessor.consumer -> queueSms "Consume mensaje de SMS" "AWS SQS" "001 - Fase 1"
    smsProcessor.consumer -> smsProcessor.service "Procesa mensaje de SMS" "" "001 - Fase 1"
    smsProcessor.service -> smsProcessor.repository "Actualiza estado de notificación SMS" "" "001 - Fase 1"
    // smsProcessor.repository -> db "Registra estado de notificación" "Entity Framework Core" "001 - Fase 1"
    // smsProcessor.service -> smsProcessor.attachmentFetcher "Obtiene adjuntos para envío" "" "001 - Fase 1"
    // smsProcessor.attachmentFetcher -> storage "Obtiene archivos adjuntos" "AWS S3" "001 - Fase 1"
    smsProcessor.configManager -> configPlatform.configService "Lee configuraciones y secretos" "" "001 - Fase 1"
    smsProcessor.configManager -> smsProcessor.tenantConfigRepository "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    smsProcessor.tenantConfigRepository -> db "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    smsProcessor.configManager -> smsProcessor.channelConfigRepository "Lee configuraciones de canal" "Entity Framework Core" "001 - Fase 1"
    smsProcessor.channelConfigRepository -> db "Lee configuraciones de canal" "Entity Framework Core" "001 - Fase 1"
    // smsProcessor.service -> smsProcessor.configManager "Obtiene configuraciones de canal" "" "001 - Fase 1"
    whatsappProcessor.consumer -> queueWhatsapp "Consume mensaje de WhatsApp" "AWS SQS" "001 - Fase 1"
    whatsappProcessor.consumer -> whatsappProcessor.service "Procesa mensaje de WhatsApp" "" "001 - Fase 1"
    whatsappProcessor.service -> whatsappProcessor.repository "Actualiza estado de notificación WhatsApp" "" "001 - Fase 1"
    // whatsappProcessor.repository -> db "Registra estado de notificación" "Entity Framework Core" "001 - Fase 1"
    whatsappProcessor.service -> whatsappProcessor.attachmentFetcher "Obtiene adjuntos para envío" "" "001 - Fase 1"
    whatsappProcessor.attachmentFetcher -> storage "Obtiene archivos adjuntos" "AWS S3" "001 - Fase 1"
    whatsappProcessor.configManager -> configPlatform.configService "Lee configuraciones y secretos" "" "001 - Fase 1"
    whatsappProcessor.configManager -> whatsappProcessor.tenantConfigRepository "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    whatsappProcessor.tenantConfigRepository -> db "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    whatsappProcessor.configManager -> whatsappProcessor.channelConfigRepository "Lee configuraciones de canal" "Entity Framework Core" "001 - Fase 1"
    whatsappProcessor.channelConfigRepository -> db "Lee configuraciones de canal" "Entity Framework Core" "001 - Fase 1"
    // whatsappProcessor.service -> whatsappProcessor.configManager "Obtiene configuraciones de canal" "" "001 - Fase 1"
    pushProcessor.consumer -> queuePush "Consume mensaje de Push" "AWS SQS" "001 - Fase 1"
    pushProcessor.consumer -> pushProcessor.service "Procesa mensaje de Push" "" "001 - Fase 1"
    pushProcessor.service -> pushProcessor.repository "Actualiza estado de notificación Push" "" "001 - Fase 1"
    // pushProcessor.repository -> db "Registra estado de notificación" "Entity Framework Core" "001 - Fase 1"
    pushProcessor.service -> pushProcessor.attachmentFetcher "Obtiene adjuntos para envío" "" "001 - Fase 1"
    pushProcessor.attachmentFetcher -> storage "Obtiene archivos adjuntos" "AWS S3" "001 - Fase 1"
    pushProcessor.configManager -> configPlatform.configService "Lee configuraciones y secretos" "" "001 - Fase 1"
    pushProcessor.configManager -> pushProcessor.tenantConfigRepository "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    pushProcessor.tenantConfigRepository -> db "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    pushProcessor.configManager -> pushProcessor.channelConfigRepository "Lee configuraciones de canal" "Entity Framework Core" "001 - Fase 1"
    pushProcessor.channelConfigRepository -> db "Lee configuraciones de canal" "Entity Framework Core" "001 - Fase 1"

    appPeru -> api.controller "Solicita envío de notificación" "HTTPS vía API Gateway" "001 - Fase 1"
    appEcuador -> api.controller "Solicita envío de notificación" "HTTPS vía API Gateway" "001 - Fase 1"
    appColombia -> api.controller "Solicita envío de notificación" "HTTPS vía API Gateway" "001 - Fase 1"
    appMexico -> api.controller "Solicita envío de notificación" "HTTPS vía API Gateway" "001 - Fase 1"

    appPeru -> api.attachmentsController "Solicita gestión de adjuntos" "HTTPS vía API Gateway" "001 - Fase 1"
    appEcuador -> api.attachmentsController "Solicita gestión de adjuntos" "HTTPS vía API Gateway" "001 - Fase 1"
    appColombia -> api.attachmentsController "Solicita gestión de adjuntos" "HTTPS vía API Gateway" "001 - Fase 1"
    appMexico -> api.attachmentsController "Solicita gestión de adjuntos" "HTTPS vía API Gateway" "001 - Fase 1"

    // admin -> configurationApi.templatesController "Gestiona plantillas" "HTTPS vía API Gateway" "001 - Fase 1"
    // admin -> configurationApi.channelsController "Gestiona canales" "HTTPS vía API Gateway" "001 - Fase 1"

    scheduler.worker -> scheduler.service "Procesa notificaciones programadas" "" "001 - Fase 1"
    scheduler.service -> scheduler.repository "Accede a notificaciones programadas" "" "001 - Fase 1"
    scheduler.repository -> db "Lee notificaciones programadas" "Entity Framework Core" "001 - Fase 1"
    scheduler.publisher -> queue "Envía notificaciones programadas a la cola de notificación" "AWS SQS" "001 - Fase 1"
    scheduler.service -> scheduler.publisher "Publica notificaciones programadas" "" "001 - Fase 1"
    scheduler.configManager -> configPlatform.configService "Lee configuraciones y secretos" "" "001 - Fase 1"
    scheduler.configManager -> scheduler.tenantConfigRepository "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"
    scheduler.tenantConfigRepository -> db "Lee configuraciones por tenant" "Entity Framework Core" "001 - Fase 1"

    emailProcessor.adapter -> dlq "Envía mensaje fallido a DLQ" "AWS SQS" "DLQ 001 - Fase 1"
    smsProcessor.adapter -> dlq "Envía mensaje fallido a DLQ" "AWS SQS" "DLQ 001 - Fase 1"
    whatsappProcessor.adapter -> dlq "Envía mensaje fallido a DLQ" "AWS SQS" "DLQ 001 - Fase 1"
    pushProcessor.adapter -> dlq "Envía mensaje fallido a DLQ" "AWS SQS" "DLQ 001 - Fase 1"

    // Relaciones entre service y adapter de cada canal
    emailProcessor.service -> emailProcessor.adapter "Envía mensaje a proveedor de Email" "" "001 - Fase 1"
    smsProcessor.service -> smsProcessor.adapter "Envía mensaje a proveedor de SMS" "" "001 - Fase 1"
    whatsappProcessor.service -> whatsappProcessor.adapter "Envía mensaje a proveedor de WhatsApp" "" "001 - Fase 1"
    pushProcessor.service -> pushProcessor.adapter "Envía mensaje a proveedor de Push" "" "001 - Fase 1"

    emailProcessor.adapter -> emailProvider "Envía notificación a proveedor externo de Email" "HTTPS" "Integración 001 - Fase 1"
    smsProcessor.adapter -> smsProvider "Envía notificación a proveedor externo de SMS" "HTTPS" "Integración 001 - Fase 1"
    whatsappProcessor.adapter -> whatsappProvider "Envía notificación a proveedor externo de WhatsApp" "HTTPS" "Integración 001 - Fase 1"
    pushProcessor.adapter -> pushProvider "Envía notificación a proveedor externo de Push" "HTTPS" "Integración 001 - Fase 1"
}
